name: AI PR Review with GitHub Copilot

on:
  pull_request:
    types: [opened, synchronize]
    # Only run on Dependabot PRs
    branches: ['**']

jobs:
  github-copilot-review:
    if: contains(github.event.pull_request.title, 'chore(deps)') || github.actor == 'dependabot[bot]'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Analyze Dependency Changes
        id: analyze
        run: |
          echo "üîç Analyzing dependency changes..."
          
          # Get changed files
          git diff --name-only HEAD~1 HEAD > changed_files.txt
          
          # Extract dependency changes
          if grep -q "Versions.kt\|build.gradle\|dependencies" changed_files.txt; then
            echo "dependency_changes=true" >> $GITHUB_OUTPUT
            
            # Get the diff for analysis
            git diff HEAD~1 HEAD -- "*.gradle" "*.kt" > dependency_diff.txt
            
            # Extract version changes with more detail
            git diff HEAD~1 HEAD | grep -E "^\+.*const val.*=|^\-.*const val.*=" > version_changes.txt || true
            
            # Parse specific dependency updates
            git diff HEAD~1 HEAD buildSrc/src/main/kotlin/io.customer/android/Versions.kt | \
              grep -E "^\+.*const val.*=|^\-.*const val.*=" | \
              sed 's/[+-].*const val \([A-Z_]*\) = "\([^"]*\)".*/\1:\2/' > parsed_changes.txt || true
          else
            echo "dependency_changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Assign GitHub Copilot and Add Context
        if: steps.analyze.outputs.dependency_changes == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            // Double-check this is a dependency update PR before assigning Copilot
            const isDependencyPR = (
              '${{ github.actor }}' === 'dependabot[bot]' || 
              '${{ github.event.pull_request.title }}'.includes('chore(deps)') ||
              '${{ github.event.pull_request.title }}'.toLowerCase().includes('dependency') ||
              '${{ github.event.pull_request.title }}'.toLowerCase().includes('deps')
            );
            
            if (!isDependencyPR) {
              console.log('üö´ Not a dependency PR - skipping Copilot assignment');
              console.log('PR Title:', '${{ github.event.pull_request.title }}');
              console.log('Actor:', '${{ github.actor }}');
              return;
            }
            
            console.log('‚úÖ Confirmed dependency PR - proceeding with Copilot assignment');
            console.log('PR Title:', '${{ github.event.pull_request.title }}');
            console.log('Actor:', '${{ github.actor }}');
            
            // Assign Copilot as reviewer ONLY for dependency updates
            try {
              await github.rest.pulls.requestReviewers({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                reviewers: ['copilot']
              });
              console.log('‚úÖ Successfully assigned Copilot as reviewer for dependency analysis');
            } catch (error) {
              console.log('‚ö†Ô∏è Copilot assignment failed:', error.message);
              // Don't fail the workflow if Copilot assignment fails
            }
            
            // Read the dependency changes for context
            const fs = require('fs');
            const changedFiles = fs.readFileSync('changed_files.txt', 'utf8');
            const versionChanges = fs.readFileSync('version_changes.txt', 'utf8');
            
            // Generate Copilot commands based on detected changes
            const generateCopilotCommands = (changes) => {
              const commands = [];
              
              // Component-specific commands based on detected dependencies
              if (changes.includes('Firebase') || changes.includes('firebase')) {
                commands.push('How does this Firebase update affect push notifications in Customer.io SDK?');
              }
              if (changes.includes('Compose') || changes.includes('compose')) {
                commands.push('What Compose changes might break our in-app messaging UI?');
              }
              if (changes.includes('Kotlin') || changes.includes('kotlin')) {
                commands.push('Check Kotlin version compatibility across all dependencies in our SDK');
              }
              if (changes.includes('Retrofit') || changes.includes('retrofit') || changes.includes('OkHttp') || changes.includes('okhttp')) {
                commands.push('Analyze networking library changes impact on our API communication');
              }
              if (changes.includes('Redux') || changes.includes('redux')) {
                commands.push('Analyze Redux changes affecting our in-app messaging state management');
              }
              if (changes.includes('Segment') || changes.includes('segment')) {
                commands.push('Check if this Segment update affects our data pipeline architecture');
              }
              if (changes.includes('Android Gradle Plugin') || changes.includes('AGP')) {
                commands.push('Verify AGP compatibility with our build configuration and Kotlin version');
              }
              if (changes.includes('Coroutines') || changes.includes('coroutines')) {
                commands.push('Check coroutines compatibility with our asynchronous programming implementation');
              }
              
              // Always include general analysis
              commands.unshift('Review AGENTS.md for project context, then analyze these dependency updates for Customer.io Android SDK impact');
              
              return commands;
            };
            
            const copilotCommands = generateCopilotCommands(versionChanges + changedFiles);
            const commandsList = copilotCommands.map(cmd => `- ${cmd}`).join('\n');
            
            // Add context comment for Copilot (ONLY for dependency PRs)
            const contextComment = `ü§ñ **GitHub Copilot Dependency Review** - This is a dependency update PR.

            **üìã Start Here**: Read **AGENTS.md** for complete Customer.io Android SDK context, architecture, and guidelines.

            **üîç Focus Your Analysis On**:
            - Check current versions in \`buildSrc/src/main/kotlin/io.customer/android/Versions.kt\` for compatibility
            - Verify Android API level compatibility (check min/target SDK in build files)
            - Assess Kotlin version compatibility across all dependencies
            - Review impact on Customer.io SDK components (detailed in AGENTS.md)

            **üéØ Specific Questions to Consider**:
            ${commandsList}

            ---
            **Note**: Copilot is only assigned to dependency update PRs, not general code reviews.
            **Important**: AGENTS.md contains all project context - start there for accurate analysis.`;
            
            const summaryComment = `## ü§ñ Customer.io SDK Dependency Analysis
            
            **GitHub Copilot** has been assigned to review this dependency update with Customer.io SDK-specific context.
            
            ### üéØ Analysis Focus Areas
            ${commandsList}
            
            <details>
            <summary>üìã Customer.io SDK Context</summary>
            
            Copilot will analyze these changes against:
            - Push notification functionality (Firebase integration)
            - In-app messaging system (Compose UI)
            - Event tracking and analytics
            - Asynchronous programming (Kotlin coroutines)
            - Network requests and API communication (Retrofit + OkHttp)
            - Data persistence and caching
            - Sample app compatibility
            
            **Project Guidelines**: All details are in AGENTS.md - Copilot will reference this for complete context.
            
            </details>
            
            <details>
            <summary>üîß How to Proceed</summary>
            
            1. **Wait for Copilot's analysis** - Copilot will review the changes automatically
            2. **Ask follow-up questions** - Use @copilot in comments for specific concerns
            3. **Review highlighted areas** - Focus testing on components Copilot identifies as potentially affected
            4. **Check compatibility** - Verify Kotlin version and Android API compatibility
            
            </details>
            
            > **Note**: This analysis is powered by GitHub Copilot with Customer.io Android SDK-specific context. No external AI services or API keys required! üöÄ`;
            
            // Post the main analysis comment
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summaryComment
            });
            
            // Post context comment for Copilot (ONLY for dependency PRs)
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: contextComment
            }); 