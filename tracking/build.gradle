import groovy.json.JsonBuilder
import groovy.json.JsonSlurper
import io.customer.android.Configurations
import io.customer.android.Dependencies

plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id "org.jetbrains.kotlin.kapt"
    id 'com.twilio.apkscale'
}

ext {
    PUBLISH_GROUP_ID = Configurations.artifactGroup
    PUBLISH_ARTIFACT_ID = "tracking"
}

apply from: "${rootDir}/scripts/publish-module.gradle"
apply from: "${rootDir}/scripts/android-config.gradle"
apply from: "${rootDir}/scripts/codecov-android.gradle"
apply from: "${rootDir}/scripts/android-module-testing.gradle"

android {
    defaultConfig {
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        androidTest {
            java.srcDirs += 'src/sharedTest/java'
        }
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        freeCompilerArgs += [
                '-Xopt-in=kotlin.RequiresOptIn',
                '-Xopt-in=io.customer.base.internal.InternalCustomerIOApi',
        ]
    }
}


tasks.register('aggregateApkscaleReports') {

    dependsOn('measureSize')
    doLast {
        // List to hold all JSON content
        List allReports = []

        // Groovy's JSON parser
        def jsonSlurper = new JsonSlurper()
        def jsonBuilder = new JsonBuilder()

        // Iterate over each project
        project.subprojects.findAll { subproject ->
            subproject.plugins.hasPlugin('com.android.library')
        }.each { subproject ->
            println "Processing ${subproject.name}"

            // Define the expected location of the apkscale.json file
            def jsonFile = subproject.file('build/apkscale/build/outputs/reports/apkscale.json')

            // Check if the file exists and read its content
            if (jsonFile.exists()) {
                def content = jsonSlurper.parse(jsonFile)
                allReports.addAll(content)
            } else {
                println "apkscale.json not found for ${subproject.name}"
            }
        }

        // Now `allReports` contains all the data, convert it to JSON string
        def aggregatedData = jsonBuilder(allReports)

        // Define the output file path
        def outputFile = project.file('aggregatedApkscaleReport.json')

        // Write the aggregated data to the file
        outputFile.text = jsonBuilder.toPrettyString(aggregatedData)
        println "Aggregated report generated at: ${outputFile}"
    }
}

dependencies {
    api project(":base")

    implementation Dependencies.coroutinesCore
    implementation Dependencies.coroutinesAndroid
    implementation Dependencies.retrofit
    implementation Dependencies.moshi
    implementation Dependencies.retrofitMoshiConverter
    implementation Dependencies.okhttpLoggingInterceptor
    api Dependencies.androidxCoreKtx

    kapt(Dependencies.moshiCodeGen)
    kaptTest(Dependencies.moshiCodeGen)
    kaptAndroidTest(Dependencies.moshiCodeGen)
}

