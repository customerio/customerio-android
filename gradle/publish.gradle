/*
The contents of this file made with help from this guide: https://central.sonatype.org/publish/publish-gradle/
Note, we are using the `maven` plugin instead of `maven-publish` (https://docs.gradle.org/current/userguide/publishing_maven.html)
because maven-publish does not support signing at this time. `maven` works well with `signing`. 
I have used `maven-publish` with `signing` and your artifacts don't actually get signed. You know signing happens when 
`.asc` files get generated for your maven artifacts after building them. 
*/

apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'org.jetbrains.dokka'

dokkaHtml.configure {
    dokkaSourceSets {
        named("main") {
            sourceLink {
                localDirectory.set(file(moduleSourceCodeLocalDir))
                remoteUrl.set(java.net.URL(moduleSourceCodeLinkUrl))
                remoteLineSuffix.set("#L") // works for github links
            }
        }
    }
}

def isSnapshotBuild() {
    return System.getenv("MODULE_VERSION").contains("SNAPSHOT")
}

afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { deployment -> signing.signPom(deployment) }

                pom.groupId = modulePackageName
                pom.artifactId = moduleName
                pom.version = System.getenv("MODULE_VERSION") // example: 1.0.0 or 1.0.0-alpha

                repository(url: "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: System.getenv("GRADLE_PUBLISH_USERNAME"), password: System.getenv("GRADLE_PUBLISH_PASSWORD"))
                }
                snapshotRepository(url: "https://s01.oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: System.getenv("GRADLE_PUBLISH_USERNAME"), password: System.getenv("GRADLE_PUBLISH_PASSWORD"))
                }

                pom.project {
                    name moduleFormalName
                    packaging "aar"
                    description moduleDescription
                    url moduleUrl

                    scm {
                        url moduleSourceCodeUrl
                        connection moduleSourceCodeConnection
                        developerConnection moduleSourceCodeConnection
                    }

                    licenses {
                        license {
                            name moduleLicenseName
                            url moduleLicenseUrl
                        }
                    }

                    developers {
                        developer {
                            id developerId
                            name developerName
                            email developerEmail
                        }
                    }
                }
            }
        }
    }

    signing {
        required { !isSnapshotBuild() && gradle.taskGraph.hasTask("uploadArchives") }

        // ORG_GRADLE_PROJECT_signingKeyId
        // ORG_GRADLE_PROJECT_signingKey
        // ORG_GRADLE_PROJECT_signingPassword
        useInMemoryPgpKeys(findProperty("signingKeyId"), findProperty("signingKey"), findProperty("signingPassword"))

        sign configurations.archives
    }

    task sourcesJar(type: Jar) {
        group "publishing"
        description "Generates sources jar"
        archiveClassifier.set("sources")
        from android.sourceSets.main.java.srcDirs
    }

    task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
        group "publishing"
        description "Generates javadocJar based on Dokka"
        archiveClassifier.set("javadoc")
        from dokkaJavadoc.outputDirectory
    }

    artifacts {
        archives javadocJar
        archives sourcesJar
    }
}