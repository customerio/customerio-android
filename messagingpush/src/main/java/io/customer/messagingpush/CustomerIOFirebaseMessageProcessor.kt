package io.customer.messagingpush

import android.content.Context
import com.google.firebase.messaging.RemoteMessage
import io.customer.base.internal.InternalCustomerIOApi
import io.customer.messagingpush.di.moduleConfig
import io.customer.messagingpush.util.PushTrackingUtil
import io.customer.sdk.CustomerIO
import io.customer.sdk.util.Logger

/**
 * Helper class to hold all message processing tasks at a single place.
 */
@InternalCustomerIOApi
interface CustomerIOFirebaseMessageProcessor {
    /**
     * Should be called whenever push notification is received. The method is
     * responsible for making sure that a CIO notification is processed only one
     * time even if the listeners are invoked multiple times.
     *
     * @param context reference to application context
     * @param remoteMessage message received from FCM.
     * @param handleNotificationTrigger indicating if the local notification should be triggered
     * @return true if the notification was processed by the SDK either now or previously, false
     * if the notification is not from Customer.io or SDK is not yet initialized.
     */
    fun onMessageReceived(
        context: Context,
        remoteMessage: RemoteMessage,
        handleNotificationTrigger: Boolean = true
    ): Boolean
}

@InternalCustomerIOApi
internal class CustomerIOFirebaseMessageProcessorImpl(
    private val logger: Logger
) : CustomerIOFirebaseMessageProcessor {
    /**
     * Holds message id of last handled notification against CIO delivery token.
     * This helps deciding between whether the notification was previously processed or not.
     */
    private val deliveryTokenToMessageId = mutableMapOf<String, MutableList<String>>()

    override fun onMessageReceived(
        context: Context,
        remoteMessage: RemoteMessage,
        handleNotificationTrigger: Boolean
    ): Boolean {
        val cioDeliveryToken = remoteMessage.data[PushTrackingUtil.DELIVERY_TOKEN_KEY]
        // Skip processing the notification if there isn't any Customer.io delivery token
        if (cioDeliveryToken.isNullOrBlank()) {
            logger.info("Not a CIO push notification, skipping processing")
            return false
        }

        val sdkInstance = CustomerIO.instanceOrNull(context)
        // If CustomerIO instance isn't initialized, we can't handle the notification
        if (sdkInstance == null) {
            logger.info("Customer.io SDK not yet initialized, skipping push notification")
            return false
        }

        val currentMessageId = remoteMessage.messageId
        // FCM message id not available, process the notification only if allowed in the config
        // Read config docs for more details on the flag
        if (currentMessageId.isNullOrBlank() && sdkInstance.diGraph.moduleConfig.ignoreMessageWithInvalidId) {
            logger.info("CIO push notification received with invalid message id. Make sure to set message id or disable ignoreMessageWithInvalidId in config")
            return false
        }

        val isHandled: Boolean
        // Make sure to process same notification only one time irrespective of number of callbacks
        // invoked for it
        synchronized(this) {
            val lastMessageIds = deliveryTokenToMessageId.getOrPut(cioDeliveryToken) {
                mutableListOf()
            }
            // Message ID is generated by FCM and helps us handling one notification only once
            // If the ID is null, we'll fallback to the behavior suggested by the config
            if (lastMessageIds.isEmpty() || !lastMessageIds.contains(currentMessageId)) {
                logger.info("CIO push notification processing with token $cioDeliveryToken, message id: $currentMessageId")
                val handler = CustomerIOPushNotificationHandler(remoteMessage = remoteMessage)
                isHandled = handler.handleMessage(context, handleNotificationTrigger)
                if (!currentMessageId.isNullOrBlank()) {
                    lastMessageIds.add(currentMessageId)
                }
            } else {
                logger.info("CIO push notification already processed with token $cioDeliveryToken, message id: $currentMessageId")
                isHandled = true
            }
        }
        return isHandled
    }
}
