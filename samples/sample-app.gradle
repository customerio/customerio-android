Properties localProperties = new Properties()
File localPropertiesFile = file("${rootDir}/samples/local.properties")
if (localPropertiesFile.exists()) {
    localProperties.load(new FileInputStream(localPropertiesFile))
}

android {
    defaultConfig {
        // Sets the configuration key prefix, with fallback to empty string if not set
        String configKeyPrefix = project.findProperty("appConfigKeyPrefix") ?: ""

        // Helper method to retrieve the property with prefix or fallback to default key
        Closure<String> getConfigWithPrefix = { String key ->
            localProperties."${configKeyPrefix}${key}" ?: localProperties."${key}"
        }

        // Retrieve API keys using the helper method to allow key prefixing
        // e.g. Java Layout sample app has prefix javaLayout_ for API keys
        // javaLayout_cdpApiKey=KEY has higher priority than cdpApiKey=KEY
        // cdpApiKey=KEY can be used as a fallback for all sample apps
        String apiKey = getConfigWithPrefix("apiKey")
        String cdpApiKey = getConfigWithPrefix("cdpApiKey")
        String siteId = getConfigWithPrefix("siteId")

        // Set build config fields for API keys
        buildConfigField "String", "API_KEY", "\"${apiKey}\""
        buildConfigField "String", "CDP_API_KEY", "\"${cdpApiKey}\""
        buildConfigField "String", "SITE_ID", "\"${siteId}\""
    }
    // Avoid redefining signing configs in sample apps to avoid breaking release
    // builds (specially on CI servers)
    signingConfigs {
        debug {
            storeFile file("${rootDir}/samples/debug.keystore")
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }
    buildFeatures {
        // BuildConfig is needed by sample apps to access api keys from local.properties
        buildConfig = true
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            signingConfig signingConfigs.debug
        }
    }
    repositories {
        // For locally deployed builds
        mavenLocal()
        // For snapshot builds
        maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots/' }
    }
    sourceSets {
        main {
            res.srcDirs += [
                    "${rootDir}/samples/resources",
            ]
        }
    }
}

dependencies {
    def cioSDKVersion = localProperties["sdkVersion"]
    if (cioSDKVersion == null || cioSDKVersion.toString().isBlank()) {
        // Add local dependency for SDK modules, helpful for debugging
        implementation(project(":tracking"))
        implementation(project(":datapipelines"))
        implementation(project(":messagingpush"))
        implementation(project(":messaginginapp"))
    } else {
        // Stable releases dependency, use published versions directly
        implementation "io.customer.android:tracking:$cioSDKVersion"
        implementation "io.customer.android:datapipelines:$cioSDKVersion"
        implementation "io.customer.android:messaging-push-fcm:$cioSDKVersion"
        implementation "io.customer.android:messaging-in-app:$cioSDKVersion"
    }
}
