Properties localProperties = new Properties()
File localPropertiesFile = file("${rootDir}/samples/local.properties")
if (localPropertiesFile.exists()) {
    localProperties.load(new FileInputStream(localPropertiesFile))
}

// Common Compose version variables
def compose_version = "1.4.1"
def compose_bom_version = "2023.10.01"
def compose_compiler_version = "1.4.7"
def kotlin_bom_version = "1.8.20"
def core_ktx_version = "1.10.1"

ext {
    COMPOSE_VERSION = compose_version
    COMPOSE_COMPILER_VERSION = compose_compiler_version
}

android {
    defaultConfig {
        // Sets the configuration key prefix, with fallback to empty string if not set
        String configKeyPrefix = project.findProperty("appConfigKeyPrefix") ?: ""

        // Helper method to retrieve the property with prefix or fallback to default key
        Closure<String> getConfigWithPrefix = { String key ->
            localProperties."${configKeyPrefix}${key}" ?: localProperties."${key}"
        }
        // Helper methods to retrieve language and UI framework from prefix
        Closure<String> getLanguageFromPrefix = { String prefix ->
            String normalizedPrefix = prefix.toLowerCase()
            if (normalizedPrefix.startsWith("java")) {
                return "Java"
            } else if (normalizedPrefix.startsWith("kotlin")) {
                return "Kotlin"
            }
            return null
        }
        Closure<String> getUIFrameworkFromPrefix = { String prefix ->
            String normalizedPrefix = prefix.toLowerCase()
            if (normalizedPrefix.contains("layout")) {
                return "Android XML"
            } else if (normalizedPrefix.contains("compose")) {
                return "Jetpack Compose"
            }
            return null
        }

        // Retrieve API keys using the helper method to allow key prefixing
        // e.g. Java Layout sample app has prefix javaLayout_ for API keys
        // javaLayout_cdpApiKey=KEY has higher priority than cdpApiKey=KEY
        // cdpApiKey=KEY can be used as a fallback for all sample apps
        String cdpApiKey = getConfigWithPrefix("cdpApiKey")
        String siteId = getConfigWithPrefix("siteId")
        String workspace = getConfigWithPrefix("workspace")
        String language = getConfigWithPrefix("language") ?: getLanguageFromPrefix(configKeyPrefix)
        String uiFramework = getConfigWithPrefix("uiFramework") ?: getUIFrameworkFromPrefix(configKeyPrefix)
        String sdkIntegration = "Maven"
        String sdkVersion = localProperties["sdkVersion"]
        String branchName = localProperties["branchName"]
        String commitHash = localProperties["commitHash"]
        String commitsAheadCount = localProperties["commitsAheadCount"]

        // Set build config fields for API keys
        buildConfigField "String", "CDP_API_KEY", "\"${cdpApiKey}\""
        buildConfigField "String", "SITE_ID", "\"${siteId}\""
        buildConfigField "String", "DEFAULT_WORKSPACE", "\"${workspace}\""
        buildConfigField "String", "LANGUAGE", "\"${language}\""
        buildConfigField "String", "UI_FRAMEWORK", "\"${uiFramework}\""
        buildConfigField "String", "SDK_INTEGRATION", "\"${sdkIntegration}\""
        buildConfigField "String", "SDK_VERSION", "\"${sdkVersion}\""
        buildConfigField "String", "BRANCH_NAME", "\"${branchName}\""
        buildConfigField "String", "COMMIT_HASH", "\"${commitHash}\""
        buildConfigField "String", "COMMITS_AHEAD_COUNT", "\"${commitsAheadCount}\""
        buildConfigField "long", "BUILD_TIMESTAMP", System.currentTimeMillis() + "L"
    }
    // Avoid redefining signing configs in sample apps to avoid breaking release
    // builds (specially on CI servers)
    signingConfigs {
        debug {
            storeFile file("${rootDir}/samples/debug.keystore")
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }
    buildFeatures {
        // BuildConfig is needed by sample apps to access api keys from local.properties
        buildConfig = true
        
        // Enable Compose for all projects, since both Java Layout and Kotlin Compose need it
        compose true
    }
    
    // Set Compose compiler version for all projects
    composeOptions {
        kotlinCompilerExtensionVersion compose_compiler_version
    }
    
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            signingConfig signingConfigs.debug
        }
    }
    repositories {
        // For locally deployed builds
        mavenLocal()
        // For snapshot builds
        maven { url 'https://central.sonatype.com/repository/maven-snapshots/' }
    }
    sourceSets {
        main {
            res.srcDirs += [
                    "${rootDir}/samples/resources",
            ]
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
}

dependencies {
    def cioSDKVersion = localProperties["sdkVersion"]
    if (cioSDKVersion == null || cioSDKVersion.toString().isBlank()) {
        // Add local dependency for SDK modules, helpful for debugging
        implementation(project(":datapipelines"))
        implementation(project(":messagingpush"))
        implementation(project(":messaginginapp"))
        // messaginginapp-compose adds messaginginapp transitively
        implementation(project(":messaginginapp-compose"))
    } else {
        // Stable releases dependency, use published versions directly
        implementation "io.customer.android:datapipelines:$cioSDKVersion"
        implementation "io.customer.android:messaging-push-fcm:$cioSDKVersion"
        implementation "io.customer.android:messaging-in-app:$cioSDKVersion"
        // messaginginapp-compose adds messaginginapp transitively
        implementation "io.customer.android:messaging-in-app-compose:$cioSDKVersion"
    }
    
    // Add Compose dependencies for all sample projects
    // Kotlin BOM (Bill of Materials) for consistent Kotlin dependencies
    implementation platform("org.jetbrains.kotlin:kotlin-bom:$kotlin_bom_version")

    // Compose BOM for consistent Compose dependencies
    implementation platform("androidx.compose:compose-bom:$compose_bom_version")

    // Required Compose dependencies
    implementation "androidx.compose.ui:ui"
    implementation "androidx.compose.ui:ui-graphics"
    implementation "androidx.compose.ui:ui-tooling-preview"

    // Core KTX is needed for Compose
    implementation "androidx.core:core-ktx:$core_ktx_version"

    // Material for Compose - needed by both sample apps
    implementation "androidx.compose.material:material"

    // Note: activity-compose dependency is defined directly in the kotlin_compose build.gradle.kts file

    // Debug tooling
    debugImplementation "androidx.compose.ui:ui-tooling:$compose_version"
}